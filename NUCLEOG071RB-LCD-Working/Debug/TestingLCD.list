
TestingLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003538  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080035f4  080035f4  000045f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  000055dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800367c  0800367c  0000467c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003684  08003684  000055dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00004684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003688  08003688  00004688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005dc  20000000  0800368c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200005dc  08003c68  000055dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08003c68  000056f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000055dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8ad  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3d  00000000  00000000  00011eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00013bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f4  00000000  00000000  00014630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001739d  00000000  00000000  00014e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d22e  00000000  00000000  0002c1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ece  00000000  00000000  000393ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce2bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000243c  00000000  00000000  000ce300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200005dc 	.word	0x200005dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080035dc 	.word	0x080035dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200005e0 	.word	0x200005e0
 8000100:	080035dc 	.word	0x080035dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <send_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_command(uint8_t byte) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	// Set RS/A0 low (command).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <send_command+0x30>)
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fed2 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8000634:	2301      	movs	r3, #1
 8000636:	425b      	negs	r3, r3
 8000638:	1df9      	adds	r1, r7, #7
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <send_command+0x34>)
 800063c:	2201      	movs	r2, #1
 800063e:	f001 fe69 	bl	8002314 <HAL_SPI_Transmit>
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	50000400 	.word	0x50000400
 8000650:	200005f8 	.word	0x200005f8

08000654 <send_data>:

void send_data(uint8_t byte) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	0002      	movs	r2, r0
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	701a      	strb	r2, [r3, #0]
	// Set RS/A0 high (data).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <send_data+0x30>)
 8000662:	2201      	movs	r2, #1
 8000664:	2102      	movs	r1, #2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 feb6 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	1df9      	adds	r1, r7, #7
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <send_data+0x34>)
 8000674:	2201      	movs	r2, #1
 8000676:	f001 fe4d 	bl	8002314 <HAL_SPI_Transmit>
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	50000400 	.word	0x50000400
 8000688:	200005f8 	.word	0x200005f8

0800068c <send_char_bytes>:

void send_char_bytes(char *bytes) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	for (int x = 0; x < 8; x++) {
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	e02f      	b.n	80006fa <send_char_bytes+0x6e>
		uint8_t col = 0;
 800069a:	2313      	movs	r3, #19
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < 8; y++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	e01c      	b.n	80006e2 <send_char_bytes+0x56>
			char row = bytes[y];
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	18d2      	adds	r2, r2, r3
 80006ae:	210b      	movs	r1, #11
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	701a      	strb	r2, [r3, #0]
			col |= ((row >> x) & 1) << y;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	411a      	asrs	r2, r3
 80006be:	0013      	movs	r3, r2
 80006c0:	2201      	movs	r2, #1
 80006c2:	401a      	ands	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	409a      	lsls	r2, r3
 80006c8:	0013      	movs	r3, r2
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	2113      	movs	r1, #19
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b25a      	sxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < 8; y++) {
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3301      	adds	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	dddf      	ble.n	80006a8 <send_char_bytes+0x1c>
		}
		send_data(col);
 80006e8:	2313      	movs	r3, #19
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff ffb0 	bl	8000654 <send_data>
	for (int x = 0; x < 8; x++) {
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	ddcc      	ble.n	800069a <send_char_bytes+0xe>
	}
}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b006      	add	sp, #24
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <send_char>:

void send_char(char ch) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	0002      	movs	r2, r0
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	701a      	strb	r2, [r3, #0]
	send_char_bytes(font8x8_basic[ch]);
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	00da      	lsls	r2, r3, #3
 800071e:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <send_char+0x24>)
 8000720:	18d3      	adds	r3, r2, r3
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff ffb2 	bl	800068c <send_char_bytes>
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b002      	add	sp, #8
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000

08000734 <send_greek_char>:

void send_greek_char(int index) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	send_char_bytes(font8x8_greek[index]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	00da      	lsls	r2, r3, #3
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <send_greek_char+0x20>)
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ffa1 	bl	800068c <send_char_bytes>
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	20000400 	.word	0x20000400

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075e:	f000 fb79 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000762:	f000 f8f5 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 f9c9 	bl	8000afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076a:	f000 f979 	bl	8000a60 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800076e:	f000 f939 	bl	80009e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	// send_command(0xE2); // System Reset
	// HAL_Delay(10);

	// Hardware reset LCD.
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000772:	4b76      	ldr	r3, [pc, #472]	@ (800094c <main+0x1f4>)
 8000774:	2201      	movs	r2, #1
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fe2d 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fbee 	bl	8000f60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000784:	4b71      	ldr	r3, [pc, #452]	@ (800094c <main+0x1f4>)
 8000786:	2200      	movs	r2, #0
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fe24 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fbe5 	bl	8000f60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000796:	4b6d      	ldr	r3, [pc, #436]	@ (800094c <main+0x1f4>)
 8000798:	2201      	movs	r2, #1
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fe1b 	bl	80013d8 <HAL_GPIO_WritePin>

	// Set power control.
	send_command(0x28 | 0x4);
 80007a2:	202c      	movs	r0, #44	@ 0x2c
 80007a4:	f7ff ff3a 	bl	800061c <send_command>
	HAL_Delay(50);
 80007a8:	2032      	movs	r0, #50	@ 0x32
 80007aa:	f000 fbd9 	bl	8000f60 <HAL_Delay>
	send_command(0x28 | 0x6);
 80007ae:	202e      	movs	r0, #46	@ 0x2e
 80007b0:	f7ff ff34 	bl	800061c <send_command>
	HAL_Delay(50);
 80007b4:	2032      	movs	r0, #50	@ 0x32
 80007b6:	f000 fbd3 	bl	8000f60 <HAL_Delay>
	send_command(0x28 | 0x7);
 80007ba:	202f      	movs	r0, #47	@ 0x2f
 80007bc:	f7ff ff2e 	bl	800061c <send_command>
	HAL_Delay(50);
 80007c0:	2032      	movs	r0, #50	@ 0x32
 80007c2:	f000 fbcd 	bl	8000f60 <HAL_Delay>

	// Set regulation ratio.
	send_command(0x20 | 0b11);
 80007c6:	2023      	movs	r0, #35	@ 0x23
 80007c8:	f7ff ff28 	bl	800061c <send_command>

	// Set SEG direction to normal and COM direction to reverse.
	send_command(0xA0);
 80007cc:	20a0      	movs	r0, #160	@ 0xa0
 80007ce:	f7ff ff25 	bl	800061c <send_command>
	send_command(0xC8);
 80007d2:	20c8      	movs	r0, #200	@ 0xc8
 80007d4:	f7ff ff22 	bl	800061c <send_command>

	// Set bias.
	send_command(0xA3);
 80007d8:	20a3      	movs	r0, #163	@ 0xa3
 80007da:	f7ff ff1f 	bl	800061c <send_command>

	// Set display on.
	send_command(0xaf);
 80007de:	20af      	movs	r0, #175	@ 0xaf
 80007e0:	f7ff ff1c 	bl	800061c <send_command>

	// Set contrast.
	send_command(0x81);
 80007e4:	2081      	movs	r0, #129	@ 0x81
 80007e6:	f7ff ff19 	bl	800061c <send_command>
	send_command(0x30);
 80007ea:	2030      	movs	r0, #48	@ 0x30
 80007ec:	f7ff ff16 	bl	800061c <send_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	for (int i = 0; i < 8; i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	e01e      	b.n	8000834 <main+0xdc>
		send_command(0xb0 | i);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	2250      	movs	r2, #80	@ 0x50
 80007fc:	4252      	negs	r2, r2
 80007fe:	4313      	orrs	r3, r2
 8000800:	b25b      	sxtb	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff09 	bl	800061c <send_command>
		send_command(0x10);
 800080a:	2010      	movs	r0, #16
 800080c:	f7ff ff06 	bl	800061c <send_command>
		send_command(0);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff ff03 	bl	800061c <send_command>
		for (int x = 0; x < 132; x++) {
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	e005      	b.n	8000828 <main+0xd0>
			send_data(0);
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff19 	bl	8000654 <send_data>
		for (int x = 0; x < 132; x++) {
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3301      	adds	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	2b83      	cmp	r3, #131	@ 0x83
 800082c:	ddf6      	ble.n	800081c <main+0xc4>
	for (int i = 0; i < 8; i++) {
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3301      	adds	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b07      	cmp	r3, #7
 8000838:	dddd      	ble.n	80007f6 <main+0x9e>
		}
	}

	send_command(0xb0 | 0); // Set page address 0
 800083a:	20b0      	movs	r0, #176	@ 0xb0
 800083c:	f7ff feee 	bl	800061c <send_command>
	send_command(0x10 | 0); // Set column address 0
 8000840:	2010      	movs	r0, #16
 8000842:	f7ff feeb 	bl	800061c <send_command>
	send_command(0);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff fee8 	bl	800061c <send_command>

	send_char('H');
 800084c:	2048      	movs	r0, #72	@ 0x48
 800084e:	f7ff ff5d 	bl	800070c <send_char>
	send_char('E');
 8000852:	2045      	movs	r0, #69	@ 0x45
 8000854:	f7ff ff5a 	bl	800070c <send_char>
	send_char('L');
 8000858:	204c      	movs	r0, #76	@ 0x4c
 800085a:	f7ff ff57 	bl	800070c <send_char>
	send_char('L');
 800085e:	204c      	movs	r0, #76	@ 0x4c
 8000860:	f7ff ff54 	bl	800070c <send_char>
	send_char('O');
 8000864:	204f      	movs	r0, #79	@ 0x4f
 8000866:	f7ff ff51 	bl	800070c <send_char>

	send_command(0xb0 | 1); // Set page address 0
 800086a:	20b1      	movs	r0, #177	@ 0xb1
 800086c:	f7ff fed6 	bl	800061c <send_command>
	send_command(0x10 | 0); // Set column address 0
 8000870:	2010      	movs	r0, #16
 8000872:	f7ff fed3 	bl	800061c <send_command>
	send_command(0);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fed0 	bl	800061c <send_command>

	send_char('S');
 800087c:	2053      	movs	r0, #83	@ 0x53
 800087e:	f7ff ff45 	bl	800070c <send_char>
	send_char('H');
 8000882:	2048      	movs	r0, #72	@ 0x48
 8000884:	f7ff ff42 	bl	800070c <send_char>
	send_char('A');
 8000888:	2041      	movs	r0, #65	@ 0x41
 800088a:	f7ff ff3f 	bl	800070c <send_char>
	send_char('N');
 800088e:	204e      	movs	r0, #78	@ 0x4e
 8000890:	f7ff ff3c 	bl	800070c <send_char>
	send_char('E');
 8000894:	2045      	movs	r0, #69	@ 0x45
 8000896:	f7ff ff39 	bl	800070c <send_char>
	send_char('L');
 800089a:	204c      	movs	r0, #76	@ 0x4c
 800089c:	f7ff ff36 	bl	800070c <send_char>
	send_char('L');
 80008a0:	204c      	movs	r0, #76	@ 0x4c
 80008a2:	f7ff ff33 	bl	800070c <send_char>
	send_char('E');
 80008a6:	2045      	movs	r0, #69	@ 0x45
 80008a8:	f7ff ff30 	bl	800070c <send_char>

	send_command(0xb0 | 2); // Set page address 0
 80008ac:	20b2      	movs	r0, #178	@ 0xb2
 80008ae:	f7ff feb5 	bl	800061c <send_command>
	send_command(0x10 | 0); // Set column address 0
 80008b2:	2010      	movs	r0, #16
 80008b4:	f7ff feb2 	bl	800061c <send_command>
	send_command(0);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff feaf 	bl	800061c <send_command>

	for (char ch = '0'; ch <= '9'; ch++) {
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	2230      	movs	r2, #48	@ 0x30
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	e009      	b.n	80008da <main+0x182>
		send_char(ch);
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff ff1e 	bl	800070c <send_char>
	for (char ch = '0'; ch <= '9'; ch++) {
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	3201      	adds	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b39      	cmp	r3, #57	@ 0x39
 80008e0:	d9f1      	bls.n	80008c6 <main+0x16e>
	}

	send_command(0xb0 | 3); // Set page address 0
 80008e2:	20b3      	movs	r0, #179	@ 0xb3
 80008e4:	f7ff fe9a 	bl	800061c <send_command>
	send_command(0x10 | 0); // Set column address 0
 80008e8:	2010      	movs	r0, #16
 80008ea:	f7ff fe97 	bl	800061c <send_command>
	send_command(0);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fe94 	bl	800061c <send_command>

	for (char ch = '!'; ch <= '+'; ch++) {
 80008f4:	1dbb      	adds	r3, r7, #6
 80008f6:	2221      	movs	r2, #33	@ 0x21
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e009      	b.n	8000910 <main+0x1b8>
		send_char(ch);
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff ff03 	bl	800070c <send_char>
	for (char ch = '!'; ch <= '+'; ch++) {
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	3201      	adds	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b2b      	cmp	r3, #43	@ 0x2b
 8000916:	d9f1      	bls.n	80008fc <main+0x1a4>
	}

	send_command(0xb0 | 4); // Set page address 0
 8000918:	20b4      	movs	r0, #180	@ 0xb4
 800091a:	f7ff fe7f 	bl	800061c <send_command>
	send_command(0x10 | 0); // Set column address 0
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fe7c 	bl	800061c <send_command>
	send_command(0);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe79 	bl	800061c <send_command>

	for (int i = 33; i < 45; i++) {
 800092a:	2321      	movs	r3, #33	@ 0x21
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	e006      	b.n	800093e <main+0x1e6>
		send_greek_char(i);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fefe 	bl	8000734 <send_greek_char>
	for (int i = 33; i < 45; i++) {
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	2b2c      	cmp	r3, #44	@ 0x2c
 8000942:	ddf5      	ble.n	8000930 <main+0x1d8>
	}

	while (1) {
		HAL_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fb0b 	bl	8000f60 <HAL_Delay>
 800094a:	e7fb      	b.n	8000944 <main+0x1ec>
 800094c:	50000800 	.word	0x50000800

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b093      	sub	sp, #76	@ 0x4c
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	2410      	movs	r4, #16
 8000958:	193b      	adds	r3, r7, r4
 800095a:	0018      	movs	r0, r3
 800095c:	2338      	movs	r3, #56	@ 0x38
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f002 fe0f 	bl	8003584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000966:	003b      	movs	r3, r7
 8000968:	0018      	movs	r0, r3
 800096a:	2310      	movs	r3, #16
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f002 fe08 	bl	8003584 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fd4b 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2202      	movs	r2, #2
 8000982:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2280      	movs	r2, #128	@ 0x80
 8000988:	0052      	lsls	r2, r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2240      	movs	r2, #64	@ 0x40
 8000996:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fd83 	bl	80014ac <HAL_RCC_OscConfig>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009aa:	f000 f937 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	003b      	movs	r3, r7
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b4:	003b      	movs	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	003b      	movs	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c0:	003b      	movs	r3, r7
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	01d2      	lsls	r2, r2, #7
 80009c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c8:	003b      	movs	r3, r7
 80009ca:	2100      	movs	r1, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 f887 	bl	8001ae0 <HAL_RCC_ClockConfig>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009d6:	f000 f921 	bl	8000c1c <Error_Handler>
  }
}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b013      	add	sp, #76	@ 0x4c
 80009e0:	bd90      	pop	{r4, r7, pc}
	...

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_SPI1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_SPI1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_SPI1_Init+0x74>)
 80009f0:	2282      	movs	r2, #130	@ 0x82
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_SPI1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_SPI1_Init+0x74>)
 80009fe:	22e0      	movs	r2, #224	@ 0xe0
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a12:	2280      	movs	r2, #128	@ 0x80
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <MX_SPI1_Init+0x74>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 fbad 	bl	80021a4 <HAL_SPI_Init>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 f8e5 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200005f8 	.word	0x200005f8
 8000a5c:	40013000 	.word	0x40013000

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a66:	4a24      	ldr	r2, [pc, #144]	@ (8000af8 <MX_USART2_UART_Init+0x98>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a6c:	22e1      	movs	r2, #225	@ 0xe1
 8000a6e:	0252      	lsls	r2, r2, #9
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 ff08 	bl	80028c0 <HAL_UART_Init>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f8b2 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fc81 	bl	80033c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 f8a9 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000acc:	2100      	movs	r1, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fcb8 	bl	8003444 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f8a0 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <MX_USART2_UART_Init+0x94>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f002 fc36 	bl	8003350 <HAL_UARTEx_DisableFifoMode>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 f898 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	2000065c 	.word	0x2000065c
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	@ 0x2c
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	2414      	movs	r4, #20
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2314      	movs	r3, #20
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f002 fd39 	bl	8003584 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b3f      	ldr	r3, [pc, #252]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b16:	4b3e      	ldr	r3, [pc, #248]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b18:	2104      	movs	r1, #4
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b22:	2204      	movs	r2, #4
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2a:	4b39      	ldr	r3, [pc, #228]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b2e:	4b38      	ldr	r3, [pc, #224]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b30:	2120      	movs	r1, #32
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b36:	4b36      	ldr	r3, [pc, #216]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b46:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b4e:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b60:	2102      	movs	r1, #2
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_GPIO_Init+0x114>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b72:	23a0      	movs	r3, #160	@ 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fc2c 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <MX_GPIO_Init+0x118>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	2102      	movs	r1, #2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fc26 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_GPIO_Init+0x11c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2180      	movs	r1, #128	@ 0x80
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 fc20 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2202      	movs	r2, #2
 8000bae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	193a      	adds	r2, r7, r4
 8000bb2:	23a0      	movs	r3, #160	@ 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f000 faa9 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c14 <MX_GPIO_Init+0x118>)
 8000bda:	0019      	movs	r1, r3
 8000bdc:	0010      	movs	r0, r2
 8000bde:	f000 fa97 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <MX_GPIO_Init+0x11c>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f000 fa84 	bl	8001110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b00b      	add	sp, #44	@ 0x2c
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	50000400 	.word	0x50000400
 8000c18:	50000800 	.word	0x50000800

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	0549      	lsls	r1, r1, #21
 8000c50:	430a      	orrs	r2, r1
 8000c52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_MspInit+0x44>)
 8000c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	055b      	lsls	r3, r3, #21
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b08b      	sub	sp, #44	@ 0x2c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	2414      	movs	r4, #20
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	2314      	movs	r3, #20
 8000c80:	001a      	movs	r2, r3
 8000c82:	2100      	movs	r1, #0
 8000c84:	f002 fc7e 	bl	8003584 <memset>
  if(hspi->Instance==SPI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <HAL_SPI_MspInit+0x8c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d130      	bne.n	8000cf4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <HAL_SPI_MspInit+0x90>)
 8000c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <HAL_SPI_MspInit+0x90>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0149      	lsls	r1, r1, #5
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_SPI_MspInit+0x90>)
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	015b      	lsls	r3, r3, #5
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_SPI_MspInit+0x90>)
 8000cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_SPI_MspInit+0x90>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_SPI_MspInit+0x90>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000cc6:	0021      	movs	r1, r4
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2282      	movs	r2, #130	@ 0x82
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	187a      	adds	r2, r7, r1
 8000ce8:	23a0      	movs	r3, #160	@ 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 fa0e 	bl	8001110 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00b      	add	sp, #44	@ 0x2c
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b097      	sub	sp, #92	@ 0x5c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	2344      	movs	r3, #68	@ 0x44
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	0018      	movs	r0, r3
 8000d12:	2314      	movs	r3, #20
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f002 fc34 	bl	8003584 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	2410      	movs	r4, #16
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	0018      	movs	r0, r3
 8000d22:	2334      	movs	r3, #52	@ 0x34
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f002 fc2c 	bl	8003584 <memset>
  if(huart->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <HAL_UART_MspInit+0xb8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d13e      	bne.n	8000db4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2202      	movs	r2, #2
 8000d3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 f875 	bl	8001e34 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff ff65 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d52:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	0289      	lsls	r1, r1, #10
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_UART_MspInit+0xbc>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d86:	2144      	movs	r1, #68	@ 0x44
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2202      	movs	r2, #2
 8000d92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2201      	movs	r2, #1
 8000d98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2201      	movs	r2, #1
 8000da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	187a      	adds	r2, r7, r1
 8000da8:	23a0      	movs	r3, #160	@ 0xa0
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f9ae 	bl	8001110 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b017      	add	sp, #92	@ 0x5c
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f89c 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e00:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e04:	f7ff fff7 	bl	8000df6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2e:	f002 fbb1 	bl	8003594 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e32:	f7ff fc91 	bl	8000758 <main>

08000e36 <LoopForever>:

LoopForever:
  b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   r0, =_estack
 8000e38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8000e44:	0800368c 	.word	0x0800368c
  ldr r2, =_sbss
 8000e48:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8000e4c:	200006f4 	.word	0x200006f4

08000e50 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_COMP_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <HAL_Init+0x3c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_Init+0x3c>)
 8000e66:	2180      	movs	r1, #128	@ 0x80
 8000e68:	0049      	lsls	r1, r1, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f810 	bl	8000e94 <HAL_InitTick>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e001      	b.n	8000e84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fed2 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <HAL_InitTick+0x88>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d02b      	beq.n	8000f04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_InitTick+0x8c>)
 8000eae:	681c      	ldr	r4, [r3, #0]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <HAL_InitTick+0x88>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	23fa      	movs	r3, #250	@ 0xfa
 8000eb8:	0098      	lsls	r0, r3, #2
 8000eba:	f7ff f923 	bl	8000104 <__udivsi3>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f7ff f91e 	bl	8000104 <__udivsi3>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 f913 	bl	80010f6 <HAL_SYSTICK_Config>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d112      	bne.n	8000efa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d80a      	bhi.n	8000ef0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2301      	movs	r3, #1
 8000ede:	425b      	negs	r3, r3
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 f8f2 	bl	80010cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_InitTick+0x90>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e00d      	b.n	8000f0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e008      	b.n	8000f0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efa:	230f      	movs	r3, #15
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e003      	b.n	8000f0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	18fb      	adds	r3, r7, r3
 8000f10:	781b      	ldrb	r3, [r3, #0]
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b005      	add	sp, #20
 8000f18:	bd90      	pop	{r4, r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	200005d8 	.word	0x200005d8
 8000f20:	200005d0 	.word	0x200005d0
 8000f24:	200005d4 	.word	0x200005d4

08000f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_IncTick+0x1c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	001a      	movs	r2, r3
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	18d2      	adds	r2, r2, r3
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	200005d8 	.word	0x200005d8
 8000f48:	200006f0 	.word	0x200006f0

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b02      	ldr	r3, [pc, #8]	@ (8000f5c <HAL_GetTick+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	200006f0 	.word	0x200006f0

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff fff0 	bl	8000f4c <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	001a      	movs	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	189b      	adds	r3, r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	f7ff ffe0 	bl	8000f4c <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	200005d8 	.word	0x200005d8

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fbc:	d828      	bhi.n	8001010 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <__NVIC_SetPriority+0xd4>)
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	33c0      	adds	r3, #192	@ 0xc0
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	589b      	ldr	r3, [r3, r2]
 8000fce:	1dfa      	adds	r2, r7, #7
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	21ff      	movs	r1, #255	@ 0xff
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	43d2      	mvns	r2, r2
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	22ff      	movs	r2, #255	@ 0xff
 8000fec:	401a      	ands	r2, r3
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	4003      	ands	r3, r0
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffc:	481f      	ldr	r0, [pc, #124]	@ (800107c <__NVIC_SetPriority+0xd4>)
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	430a      	orrs	r2, r1
 8001008:	33c0      	adds	r3, #192	@ 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800100e:	e031      	b.n	8001074 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <__NVIC_SetPriority+0xd8>)
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0019      	movs	r1, r3
 8001018:	230f      	movs	r3, #15
 800101a:	400b      	ands	r3, r1
 800101c:	3b08      	subs	r3, #8
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3306      	adds	r3, #6
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	3304      	adds	r3, #4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1dfa      	adds	r2, r7, #7
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	0011      	movs	r1, r2
 8001030:	2203      	movs	r2, #3
 8001032:	400a      	ands	r2, r1
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	21ff      	movs	r1, #255	@ 0xff
 8001038:	4091      	lsls	r1, r2
 800103a:	000a      	movs	r2, r1
 800103c:	43d2      	mvns	r2, r2
 800103e:	401a      	ands	r2, r3
 8001040:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	22ff      	movs	r2, #255	@ 0xff
 8001048:	401a      	ands	r2, r3
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	0018      	movs	r0, r3
 8001050:	2303      	movs	r3, #3
 8001052:	4003      	ands	r3, r0
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <__NVIC_SetPriority+0xd8>)
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001c      	movs	r4, r3
 8001060:	230f      	movs	r3, #15
 8001062:	4023      	ands	r3, r4
 8001064:	3b08      	subs	r3, #8
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	430a      	orrs	r2, r1
 800106a:	3306      	adds	r3, #6
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	18c3      	adds	r3, r0, r3
 8001070:	3304      	adds	r3, #4
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	045b      	lsls	r3, r3, #17
 8001094:	429a      	cmp	r2, r3
 8001096:	d301      	bcc.n	800109c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001098:	2301      	movs	r3, #1
 800109a:	e010      	b.n	80010be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <SysTick_Config+0x44>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	3a01      	subs	r2, #1
 80010a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a4:	2301      	movs	r3, #1
 80010a6:	425b      	negs	r3, r3
 80010a8:	2103      	movs	r1, #3
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff ff7c 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x44>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x44>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	210f      	movs	r1, #15
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	1c02      	adds	r2, r0, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff ffbf 	bl	8001084 <SysTick_Config>
 8001106:	0003      	movs	r3, r0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e147      	b.n	80013b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <HAL_GPIO_Init+0x28>
 8001136:	e138      	b.n	80013aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	4013      	ands	r3, r2
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x40>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	4013      	ands	r3, r2
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	409a      	lsls	r2, r3
 800115e:	0013      	movs	r3, r2
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	2201      	movs	r2, #1
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	58d3      	ldr	r3, [r2, r3]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2107      	movs	r1, #7
 8001226:	400b      	ands	r3, r1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	401a      	ands	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	23c0      	movs	r3, #192	@ 0xc0
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_GPIO_Init+0x174>
 8001282:	e092      	b.n	80013aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001284:	4a50      	ldr	r2, [pc, #320]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3318      	adds	r3, #24
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	589b      	ldr	r3, [r3, r2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	220f      	movs	r2, #15
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	23a0      	movs	r3, #160	@ 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x1ca>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a45      	ldr	r2, [pc, #276]	@ (80013cc <HAL_GPIO_Init+0x2bc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x1c6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a44      	ldr	r2, [pc, #272]	@ (80013d0 <HAL_GPIO_Init+0x2c0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x1c2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a43      	ldr	r2, [pc, #268]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x1be>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x1cc>
 80012ce:	2305      	movs	r3, #5
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x1cc>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x1cc>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x1cc>
 80012da:	2300      	movs	r3, #0
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	2103      	movs	r1, #3
 80012e0:	400a      	ands	r2, r1
 80012e2:	00d2      	lsls	r2, r2, #3
 80012e4:	4093      	lsls	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012ec:	4936      	ldr	r1, [pc, #216]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3318      	adds	r3, #24
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fa:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	035b      	lsls	r3, r3, #13
 8001312:	4013      	ands	r3, r2
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	039b      	lsls	r3, r3, #14
 800133c:	4013      	ands	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001350:	2384      	movs	r3, #132	@ 0x84
 8001352:	58d3      	ldr	r3, [r2, r3]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001374:	4914      	ldr	r1, [pc, #80]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001376:	2284      	movs	r2, #132	@ 0x84
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800137c:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	025b      	lsls	r3, r3, #9
 8001396:	4013      	ands	r3, r2
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a2:	4909      	ldr	r1, [pc, #36]	@ (80013c8 <HAL_GPIO_Init+0x2b8>)
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	40da      	lsrs	r2, r3
 80013b8:	1e13      	subs	r3, r2, #0
 80013ba:	d000      	beq.n	80013be <HAL_GPIO_Init+0x2ae>
 80013bc:	e6b0      	b.n	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021800 	.word	0x40021800
 80013cc:	50000400 	.word	0x50000400
 80013d0:	50000800 	.word	0x50000800
 80013d4:	50000c00 	.word	0x50000c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	0008      	movs	r0, r1
 80013e2:	0011      	movs	r1, r2
 80013e4:	1cbb      	adds	r3, r7, #2
 80013e6:	1c02      	adds	r2, r0, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	1c7b      	adds	r3, r7, #1
 80013ec:	1c0a      	adds	r2, r1, #0
 80013ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f0:	1c7b      	adds	r3, r7, #1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001422:	4013      	ands	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	429a      	cmp	r2, r3
 8001436:	d11f      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	0013      	movs	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	189b      	adds	r3, r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4912      	ldr	r1, [pc, #72]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001446:	0018      	movs	r0, r3
 8001448:	f7fe fe5c 	bl	8000104 <__udivsi3>
 800144c:	0003      	movs	r3, r0
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001452:	e008      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	e001      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e009      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	401a      	ands	r2, r3
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	429a      	cmp	r2, r3
 8001476:	d0ed      	beq.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b004      	add	sp, #16
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	40007000 	.word	0x40007000
 8001488:	fffff9ff 	.word	0xfffff9ff
 800148c:	200005d0 	.word	0x200005d0
 8001490:	000f4240 	.word	0x000f4240

08001494 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	23e0      	movs	r3, #224	@ 0xe0
 800149e:	01db      	lsls	r3, r3, #7
 80014a0:	4013      	ands	r3, r2
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e2fe      	b.n	8001abc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4013      	ands	r3, r2
 80014c6:	d100      	bne.n	80014ca <HAL_RCC_OscConfig+0x1e>
 80014c8:	e07c      	b.n	80015c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ca:	4bc3      	ldr	r3, [pc, #780]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2238      	movs	r2, #56	@ 0x38
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d4:	4bc0      	ldr	r3, [pc, #768]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2203      	movs	r2, #3
 80014da:	4013      	ands	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d102      	bne.n	80014ea <HAL_RCC_OscConfig+0x3e>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d002      	beq.n	80014f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d10b      	bne.n	8001508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	4bb9      	ldr	r3, [pc, #740]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d062      	beq.n	80015c2 <HAL_RCC_OscConfig+0x116>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d15e      	bne.n	80015c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e2d9      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	025b      	lsls	r3, r3, #9
 8001510:	429a      	cmp	r2, r3
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x78>
 8001514:	4bb0      	ldr	r3, [pc, #704]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4baf      	ldr	r3, [pc, #700]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800151a:	2180      	movs	r1, #128	@ 0x80
 800151c:	0249      	lsls	r1, r1, #9
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e020      	b.n	8001566 <HAL_RCC_OscConfig+0xba>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	23a0      	movs	r3, #160	@ 0xa0
 800152a:	02db      	lsls	r3, r3, #11
 800152c:	429a      	cmp	r2, r3
 800152e:	d10e      	bne.n	800154e <HAL_RCC_OscConfig+0xa2>
 8001530:	4ba9      	ldr	r3, [pc, #676]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4ba8      	ldr	r3, [pc, #672]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001536:	2180      	movs	r1, #128	@ 0x80
 8001538:	02c9      	lsls	r1, r1, #11
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4ba6      	ldr	r3, [pc, #664]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4ba5      	ldr	r3, [pc, #660]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	0249      	lsls	r1, r1, #9
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0xba>
 800154e:	4ba2      	ldr	r3, [pc, #648]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4ba1      	ldr	r3, [pc, #644]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001554:	49a1      	ldr	r1, [pc, #644]	@ (80017dc <HAL_RCC_OscConfig+0x330>)
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	4b9f      	ldr	r3, [pc, #636]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b9e      	ldr	r3, [pc, #632]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001560:	499f      	ldr	r1, [pc, #636]	@ (80017e0 <HAL_RCC_OscConfig+0x334>)
 8001562:	400a      	ands	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d014      	beq.n	8001598 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fced 	bl	8000f4c <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fce8 	bl	8000f4c <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	@ 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e298      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	4b93      	ldr	r3, [pc, #588]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	029b      	lsls	r3, r3, #10
 8001592:	4013      	ands	r3, r2
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xcc>
 8001596:	e015      	b.n	80015c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fcd8 	bl	8000f4c <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a2:	f7ff fcd3 	bl	8000f4c <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	@ 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e283      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b4:	4b88      	ldr	r3, [pc, #544]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d1f0      	bne.n	80015a2 <HAL_RCC_OscConfig+0xf6>
 80015c0:	e000      	b.n	80015c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d100      	bne.n	80015d0 <HAL_RCC_OscConfig+0x124>
 80015ce:	e099      	b.n	8001704 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d0:	4b81      	ldr	r3, [pc, #516]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2238      	movs	r2, #56	@ 0x38
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015da:	4b7f      	ldr	r3, [pc, #508]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2203      	movs	r2, #3
 80015e0:	4013      	ands	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d102      	bne.n	80015f0 <HAL_RCC_OscConfig+0x144>
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d002      	beq.n	80015f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d135      	bne.n	8001662 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f6:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4013      	ands	r3, r2
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x162>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e256      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b72      	ldr	r3, [pc, #456]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4a74      	ldr	r2, [pc, #464]	@ (80017e4 <HAL_RCC_OscConfig+0x338>)
 8001614:	4013      	ands	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	4b6e      	ldr	r3, [pc, #440]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001620:	430a      	orrs	r2, r1
 8001622:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800162a:	4b6b      	ldr	r3, [pc, #428]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	@ (80017e8 <HAL_RCC_OscConfig+0x33c>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	4b67      	ldr	r3, [pc, #412]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800163e:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	2207      	movs	r2, #7
 8001646:	4013      	ands	r3, r2
 8001648:	4a68      	ldr	r2, [pc, #416]	@ (80017ec <HAL_RCC_OscConfig+0x340>)
 800164a:	40da      	lsrs	r2, r3
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x344>)
 800164e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001650:	4b68      	ldr	r3, [pc, #416]	@ (80017f4 <HAL_RCC_OscConfig+0x348>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fc1d 	bl	8000e94 <HAL_InitTick>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d051      	beq.n	8001702 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e22c      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d030      	beq.n	80016cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800166a:	4b5b      	ldr	r3, [pc, #364]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a5e      	ldr	r2, [pc, #376]	@ (80017e8 <HAL_RCC_OscConfig+0x33c>)
 8001670:	4013      	ands	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800167e:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001684:	2180      	movs	r1, #128	@ 0x80
 8001686:	0049      	lsls	r1, r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fc5e 	bl	8000f4c <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc59 	bl	8000f4c <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e209      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a8:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4013      	ands	r3, r2
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	@ (80017e4 <HAL_RCC_OscConfig+0x338>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	021a      	lsls	r2, r3, #8
 80016c4:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	e01b      	b.n	8001704 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	4949      	ldr	r1, [pc, #292]	@ (80017f8 <HAL_RCC_OscConfig+0x34c>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc38 	bl	8000f4c <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fc33 	bl	8000f4c <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1e3      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4013      	ands	r3, r2
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x236>
 8001700:	e000      	b.n	8001704 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001702:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2208      	movs	r2, #8
 800170a:	4013      	ands	r3, r2
 800170c:	d047      	beq.n	800179e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2238      	movs	r2, #56	@ 0x38
 8001714:	4013      	ands	r3, r2
 8001716:	2b18      	cmp	r3, #24
 8001718:	d10a      	bne.n	8001730 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171e:	2202      	movs	r2, #2
 8001720:	4013      	ands	r3, r2
 8001722:	d03c      	beq.n	800179e <HAL_RCC_OscConfig+0x2f2>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d138      	bne.n	800179e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e1c5      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d019      	beq.n	800176c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800173a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fc02 	bl	8000f4c <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fbfd 	bl	8000f4c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e1ad      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d0f1      	beq.n	800174e <HAL_RCC_OscConfig+0x2a2>
 800176a:	e018      	b.n	800179e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 800176e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001772:	2101      	movs	r1, #1
 8001774:	438a      	bics	r2, r1
 8001776:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001778:	f7ff fbe8 	bl	8000f4c <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff fbe3 	bl	8000f4c <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e193      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 8001796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d1f1      	bne.n	8001782 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d100      	bne.n	80017aa <HAL_RCC_OscConfig+0x2fe>
 80017a8:	e0c6      	b.n	8001938 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	231f      	movs	r3, #31
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2238      	movs	r2, #56	@ 0x38
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d11e      	bne.n	80017fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d100      	bne.n	80017ca <HAL_RCC_OscConfig+0x31e>
 80017c8:	e0b6      	b.n	8001938 <HAL_RCC_OscConfig+0x48c>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d000      	beq.n	80017d4 <HAL_RCC_OscConfig+0x328>
 80017d2:	e0b1      	b.n	8001938 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e171      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
 80017d8:	40021000 	.word	0x40021000
 80017dc:	fffeffff 	.word	0xfffeffff
 80017e0:	fffbffff 	.word	0xfffbffff
 80017e4:	ffff80ff 	.word	0xffff80ff
 80017e8:	ffffc7ff 	.word	0xffffc7ff
 80017ec:	00f42400 	.word	0x00f42400
 80017f0:	200005d0 	.word	0x200005d0
 80017f4:	200005d4 	.word	0x200005d4
 80017f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017fc:	4bb1      	ldr	r3, [pc, #708]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80017fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	055b      	lsls	r3, r3, #21
 8001804:	4013      	ands	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_RCC_OscConfig+0x360>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x362>
 800180c:	2300      	movs	r3, #0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d011      	beq.n	8001836 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4bac      	ldr	r3, [pc, #688]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001816:	4bab      	ldr	r3, [pc, #684]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001818:	2180      	movs	r1, #128	@ 0x80
 800181a:	0549      	lsls	r1, r1, #21
 800181c:	430a      	orrs	r2, r1
 800181e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001820:	4ba8      	ldr	r3, [pc, #672]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	055b      	lsls	r3, r3, #21
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800182e:	231f      	movs	r3, #31
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001836:	4ba4      	ldr	r3, [pc, #656]	@ (8001ac8 <HAL_RCC_OscConfig+0x61c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4013      	ands	r3, r2
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001842:	4ba1      	ldr	r3, [pc, #644]	@ (8001ac8 <HAL_RCC_OscConfig+0x61c>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac8 <HAL_RCC_OscConfig+0x61c>)
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	0049      	lsls	r1, r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001850:	f7ff fb7c 	bl	8000f4c <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fb77 	bl	8000f4c <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e127      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4b96      	ldr	r3, [pc, #600]	@ (8001ac8 <HAL_RCC_OscConfig+0x61c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4013      	ands	r3, r2
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x3e2>
 8001880:	4b90      	ldr	r3, [pc, #576]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001882:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001884:	4b8f      	ldr	r3, [pc, #572]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b05      	cmp	r3, #5
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x404>
 8001896:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001898:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800189a:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 800189c:	2104      	movs	r1, #4
 800189e:	430a      	orrs	r2, r1
 80018a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018a2:	4b88      	ldr	r3, [pc, #544]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018a6:	4b87      	ldr	r3, [pc, #540]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
 80018b0:	4b84      	ldr	r3, [pc, #528]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018b4:	4b83      	ldr	r3, [pc, #524]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018bc:	4b81      	ldr	r3, [pc, #516]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018c0:	4b80      	ldr	r3, [pc, #512]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018c2:	2104      	movs	r1, #4
 80018c4:	438a      	bics	r2, r1
 80018c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d014      	beq.n	80018fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fb3c 	bl	8000f4c <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d8:	e009      	b.n	80018ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff fb37 	bl	8000f4c <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a79      	ldr	r2, [pc, #484]	@ (8001acc <HAL_RCC_OscConfig+0x620>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0e6      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ee:	4b75      	ldr	r3, [pc, #468]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80018f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x42e>
 80018f8:	e013      	b.n	8001922 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb27 	bl	8000f4c <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001902:	e009      	b.n	8001918 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff fb22 	bl	8000f4c <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4a6f      	ldr	r2, [pc, #444]	@ (8001acc <HAL_RCC_OscConfig+0x620>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0d1      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 800191a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001922:	231f      	movs	r3, #31
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b65      	ldr	r3, [pc, #404]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 800192e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001930:	4b64      	ldr	r3, [pc, #400]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001932:	4967      	ldr	r1, [pc, #412]	@ (8001ad0 <HAL_RCC_OscConfig+0x624>)
 8001934:	400a      	ands	r2, r1
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d100      	bne.n	8001942 <HAL_RCC_OscConfig+0x496>
 8001940:	e0bb      	b.n	8001aba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001942:	4b60      	ldr	r3, [pc, #384]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2238      	movs	r2, #56	@ 0x38
 8001948:	4013      	ands	r3, r2
 800194a:	2b10      	cmp	r3, #16
 800194c:	d100      	bne.n	8001950 <HAL_RCC_OscConfig+0x4a4>
 800194e:	e07b      	b.n	8001a48 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d156      	bne.n	8001a06 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001958:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 800195e:	495d      	ldr	r1, [pc, #372]	@ (8001ad4 <HAL_RCC_OscConfig+0x628>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff faf2 	bl	8000f4c <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff faed 	bl	8000f4c <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e09d      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	049b      	lsls	r3, r3, #18
 8001988:	4013      	ands	r3, r2
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a51      	ldr	r2, [pc, #324]	@ (8001ad8 <HAL_RCC_OscConfig+0x62c>)
 8001992:	4013      	ands	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b8:	431a      	orrs	r2, r3
 80019ba:	4b42      	ldr	r3, [pc, #264]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80019bc:	430a      	orrs	r2, r1
 80019be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b40      	ldr	r3, [pc, #256]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80019c6:	2180      	movs	r1, #128	@ 0x80
 80019c8:	0449      	lsls	r1, r1, #17
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	0549      	lsls	r1, r1, #21
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fab6 	bl	8000f4c <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff fab1 	bl	8000f4c <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e061      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f8:	4b32      	ldr	r3, [pc, #200]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	049b      	lsls	r3, r3, #18
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x53a>
 8001a04:	e059      	b.n	8001aba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001a0c:	4931      	ldr	r1, [pc, #196]	@ (8001ad4 <HAL_RCC_OscConfig+0x628>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa9b 	bl	8000f4c <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fa96 	bl	8000f4c <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e046      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	@ 0x80
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	4013      	ands	r3, r2
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001a40:	4926      	ldr	r1, [pc, #152]	@ (8001adc <HAL_RCC_OscConfig+0x630>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	e038      	b.n	8001aba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e033      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x618>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d126      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2270      	movs	r2, #112	@ 0x70
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d11f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	23fe      	movs	r3, #254	@ 0xfe
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d116      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	23f8      	movs	r3, #248	@ 0xf8
 8001a8c:	039b      	lsls	r3, r3, #14
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d10e      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	23e0      	movs	r3, #224	@ 0xe0
 8001a9c:	051b      	lsls	r3, r3, #20
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	0f5b      	lsrs	r3, r3, #29
 8001aac:	075a      	lsls	r2, r3, #29
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b008      	add	sp, #32
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	00001388 	.word	0x00001388
 8001ad0:	efffffff 	.word	0xefffffff
 8001ad4:	feffffff 	.word	0xfeffffff
 8001ad8:	11c1808c 	.word	0x11c1808c
 8001adc:	eefefffc 	.word	0xeefefffc

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0e9      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b76      	ldr	r3, [pc, #472]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2207      	movs	r2, #7
 8001afa:	4013      	ands	r3, r2
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d91e      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b73      	ldr	r3, [pc, #460]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2207      	movs	r2, #7
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	4b70      	ldr	r3, [pc, #448]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b14:	f7ff fa1a 	bl	8000f4c <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1e:	f7ff fa15 	bl	8000f4c <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e0ca      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b32:	4b67      	ldr	r3, [pc, #412]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2207      	movs	r2, #7
 8001b38:	4013      	ands	r3, r2
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d015      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2204      	movs	r2, #4
 8001b50:	4013      	ands	r3, r2
 8001b52:	d006      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b54:	4b60      	ldr	r3, [pc, #384]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5a:	21e0      	movs	r1, #224	@ 0xe0
 8001b5c:	01c9      	lsls	r1, r1, #7
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b62:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4a5d      	ldr	r2, [pc, #372]	@ (8001cdc <HAL_RCC_ClockConfig+0x1fc>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b59      	ldr	r3, [pc, #356]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d057      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	029b      	lsls	r3, r3, #10
 8001b90:	4013      	ands	r3, r2
 8001b92:	d12b      	bne.n	8001bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e097      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	049b      	lsls	r3, r3, #18
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d11f      	bne.n	8001bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e08b      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb8:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d113      	bne.n	8001bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e07f      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd0:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e074      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bde:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e06d      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bec:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	4393      	bics	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4b37      	ldr	r3, [pc, #220]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7ff f9a4 	bl	8000f4c <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7ff f99f 	bl	8000f4c <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e054      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2238      	movs	r2, #56	@ 0x38
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1ec      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c30:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2207      	movs	r2, #7
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d21e      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2207      	movs	r2, #7
 8001c44:	4393      	bics	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f97c 	bl	8000f4c <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f7ff f977 	bl	8000f4c <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e02c      	b.n	8001cc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2207      	movs	r2, #7
 8001c74:	4013      	ands	r3, r2
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ce0 <HAL_RCC_ClockConfig+0x200>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c9a:	f000 f829 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	0001      	movs	r1, r0
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	401a      	ands	r2, r3
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_RCC_ClockConfig+0x204>)
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	58d3      	ldr	r3, [r2, r3]
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_ClockConfig+0x208>)
 8001cba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_RCC_ClockConfig+0x20c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff f8e7 	bl	8000e94 <HAL_InitTick>
 8001cc6:	0003      	movs	r3, r0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	00001388 	.word	0x00001388
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	fffff0ff 	.word	0xfffff0ff
 8001ce0:	ffff8fff 	.word	0xffff8fff
 8001ce4:	080035f4 	.word	0x080035f4
 8001ce8:	200005d0 	.word	0x200005d0
 8001cec:	200005d4 	.word	0x200005d4

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2238      	movs	r2, #56	@ 0x38
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d10f      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0adb      	lsrs	r3, r3, #11
 8001d06:	2207      	movs	r2, #7
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	4835      	ldr	r0, [pc, #212]	@ (8001dec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d16:	f7fe f9f5 	bl	8000104 <__udivsi3>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	e05d      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d20:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2238      	movs	r2, #56	@ 0x38
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e054      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2238      	movs	r2, #56	@ 0x38
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d138      	bne.n	8001db0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2203      	movs	r2, #3
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	2207      	movs	r2, #7
 8001d50:	4013      	ands	r3, r2
 8001d52:	3301      	adds	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	4824      	ldr	r0, [pc, #144]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d60:	f7fe f9d0 	bl	8000104 <__udivsi3>
 8001d64:	0003      	movs	r3, r0
 8001d66:	0019      	movs	r1, r3
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	227f      	movs	r2, #127	@ 0x7f
 8001d70:	4013      	ands	r3, r2
 8001d72:	434b      	muls	r3, r1
 8001d74:	617b      	str	r3, [r7, #20]
        break;
 8001d76:	e00d      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	481c      	ldr	r0, [pc, #112]	@ (8001dec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d7c:	f7fe f9c2 	bl	8000104 <__udivsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	0019      	movs	r1, r3
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	227f      	movs	r2, #127	@ 0x7f
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	434b      	muls	r3, r1
 8001d90:	617b      	str	r3, [r7, #20]
        break;
 8001d92:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0f5b      	lsrs	r3, r3, #29
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	6978      	ldr	r0, [r7, #20]
 8001da6:	f7fe f9ad 	bl	8000104 <__udivsi3>
 8001daa:	0003      	movs	r3, r0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001db0:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2238      	movs	r2, #56	@ 0x38
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d103      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2238      	movs	r2, #56	@ 0x38
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b18      	cmp	r3, #24
 8001dce:	d103      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001dd0:	23fa      	movs	r3, #250	@ 0xfa
 8001dd2:	01db      	lsls	r3, r3, #7
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e001      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ddc:	693b      	ldr	r3, [r7, #16]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b006      	add	sp, #24
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	40021000 	.word	0x40021000
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b02      	ldr	r3, [pc, #8]	@ (8001e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	200005d0 	.word	0x200005d0

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e0c:	f7ff fff2 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e10:	0004      	movs	r4, r0
 8001e12:	f7ff fb3f 	bl	8001494 <LL_RCC_GetAPB1Prescaler>
 8001e16:	0003      	movs	r3, r0
 8001e18:	0b1a      	lsrs	r2, r3, #12
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	58d3      	ldr	r3, [r2, r3]
 8001e20:	221f      	movs	r2, #31
 8001e22:	4013      	ands	r3, r2
 8001e24:	40dc      	lsrs	r4, r3
 8001e26:	0023      	movs	r3, r4
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	08003634 	.word	0x08003634

08001e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e3c:	2313      	movs	r3, #19
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e44:	2312      	movs	r3, #18
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	4013      	ands	r3, r2
 8001e56:	d100      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e58:	e0a3      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2011      	movs	r0, #17
 8001e5c:	183b      	adds	r3, r7, r0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4bc3      	ldr	r3, [pc, #780]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	055b      	lsls	r3, r3, #21
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d110      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4bc0      	ldr	r3, [pc, #768]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e72:	4bbf      	ldr	r3, [pc, #764]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e74:	2180      	movs	r1, #128	@ 0x80
 8001e76:	0549      	lsls	r1, r1, #21
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e7c:	4bbc      	ldr	r3, [pc, #752]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	055b      	lsls	r3, r3, #21
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e90:	4bb8      	ldr	r3, [pc, #736]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4bb7      	ldr	r3, [pc, #732]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e96:	2180      	movs	r1, #128	@ 0x80
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e9e:	f7ff f855 	bl	8000f4c <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea8:	f7ff f850 	bl	8000f4c <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d904      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001eb6:	2313      	movs	r3, #19
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2203      	movs	r2, #3
 8001ebc:	701a      	strb	r2, [r3, #0]
        break;
 8001ebe:	e005      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec0:	4bac      	ldr	r3, [pc, #688]	@ (8002174 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0ed      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ecc:	2313      	movs	r3, #19
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d154      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ed6:	4ba6      	ldr	r3, [pc, #664]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eda:	23c0      	movs	r3, #192	@ 0xc0
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d019      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d014      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ef2:	4b9f      	ldr	r3, [pc, #636]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef6:	4aa0      	ldr	r2, [pc, #640]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001efc:	4b9c      	ldr	r3, [pc, #624]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f00:	4b9b      	ldr	r3, [pc, #620]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	0249      	lsls	r1, r1, #9
 8001f06:	430a      	orrs	r2, r1
 8001f08:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f0a:	4b99      	ldr	r3, [pc, #612]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f0e:	4b98      	ldr	r3, [pc, #608]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f10:	499a      	ldr	r1, [pc, #616]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f16:	4b96      	ldr	r3, [pc, #600]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4013      	ands	r3, r2
 8001f22:	d016      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f812 	bl	8000f4c <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2c:	e00c      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff f80d 	bl	8000f4c <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	4a91      	ldr	r2, [pc, #580]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d904      	bls.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f3e:	2313      	movs	r3, #19
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2203      	movs	r2, #3
 8001f44:	701a      	strb	r2, [r3, #0]
            break;
 8001f46:	e004      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d0ed      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f52:	2313      	movs	r3, #19
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f5c:	4b84      	ldr	r3, [pc, #528]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f60:	4a85      	ldr	r2, [pc, #532]	@ (8002178 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6a:	4b81      	ldr	r3, [pc, #516]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f70:	e00c      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f72:	2312      	movs	r3, #18
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	2213      	movs	r2, #19
 8001f78:	18ba      	adds	r2, r7, r2
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e005      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f80:	2312      	movs	r3, #18
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2213      	movs	r2, #19
 8001f86:	18ba      	adds	r2, r7, r2
 8001f88:	7812      	ldrb	r2, [r2, #0]
 8001f8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f8c:	2311      	movs	r3, #17
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f9a:	4b75      	ldr	r3, [pc, #468]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9c:	4979      	ldr	r1, [pc, #484]	@ (8002184 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d009      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fac:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4b6d      	ldr	r3, [pc, #436]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d009      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fca:	4b69      	ldr	r3, [pc, #420]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	220c      	movs	r2, #12
 8001fd0:	4393      	bics	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b65      	ldr	r3, [pc, #404]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d009      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fe8:	4b61      	ldr	r3, [pc, #388]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	4a66      	ldr	r2, [pc, #408]	@ (8002188 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b5e      	ldr	r3, [pc, #376]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d009      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002008:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200c:	4a5f      	ldr	r2, [pc, #380]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800200e:	4013      	ands	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	4b56      	ldr	r3, [pc, #344]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002018:	430a      	orrs	r2, r1
 800201a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4013      	ands	r3, r2
 8002026:	d009      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002028:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800202e:	4013      	ands	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	4b4e      	ldr	r3, [pc, #312]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002038:	430a      	orrs	r2, r1
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	4013      	ands	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002046:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	4a52      	ldr	r2, [pc, #328]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	4b46      	ldr	r3, [pc, #280]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002056:	430a      	orrs	r2, r1
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	01db      	lsls	r3, r3, #7
 8002062:	4013      	ands	r3, r2
 8002064:	d015      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002066:	4b42      	ldr	r3, [pc, #264]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	0899      	lsrs	r1, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002074:	430a      	orrs	r2, r1
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	05db      	lsls	r3, r3, #23
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002084:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0249      	lsls	r1, r1, #9
 800208e:	430a      	orrs	r2, r1
 8002090:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	031b      	lsls	r3, r3, #12
 800209a:	4013      	ands	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800209e:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a2:	2240      	movs	r2, #64	@ 0x40
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	039b      	lsls	r3, r3, #14
 80020ba:	4013      	ands	r3, r2
 80020bc:	d016      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	4a35      	ldr	r2, [pc, #212]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	03db      	lsls	r3, r3, #15
 80020da:	429a      	cmp	r2, r3
 80020dc:	d106      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	0449      	lsls	r1, r1, #17
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	03db      	lsls	r3, r3, #15
 80020f4:	4013      	ands	r3, r2
 80020f6:	d016      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002108:	430a      	orrs	r2, r1
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	045b      	lsls	r3, r3, #17
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211e:	2180      	movs	r1, #128	@ 0x80
 8002120:	0449      	lsls	r1, r1, #17
 8002122:	430a      	orrs	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4013      	ands	r3, r2
 8002130:	d016      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	4a1a      	ldr	r2, [pc, #104]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002142:	430a      	orrs	r2, r1
 8002144:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	429a      	cmp	r2, r3
 8002150:	d106      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0249      	lsls	r1, r1, #9
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002160:	2312      	movs	r3, #18
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	fffffcff 	.word	0xfffffcff
 800217c:	fffeffff 	.word	0xfffeffff
 8002180:	00001388 	.word	0x00001388
 8002184:	efffffff 	.word	0xefffffff
 8002188:	fffff3ff 	.word	0xfffff3ff
 800218c:	fff3ffff 	.word	0xfff3ffff
 8002190:	ffcfffff 	.word	0xffcfffff
 8002194:	ffffcfff 	.word	0xffffcfff
 8002198:	ffbfffff 	.word	0xffbfffff
 800219c:	feffffff 	.word	0xfeffffff
 80021a0:	ffff3fff 	.word	0xffff3fff

080021a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0a8      	b.n	8002308 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	2382      	movs	r3, #130	@ 0x82
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d009      	beq.n	80021de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
 80021d0:	e005      	b.n	80021de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	225d      	movs	r2, #93	@ 0x5d
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	225c      	movs	r2, #92	@ 0x5c
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7fe fd38 	bl	8000c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	225d      	movs	r2, #93	@ 0x5d
 8002204:	2102      	movs	r1, #2
 8002206:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2140      	movs	r1, #64	@ 0x40
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	23e0      	movs	r3, #224	@ 0xe0
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	429a      	cmp	r2, r3
 8002222:	d902      	bls.n	800222a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e002      	b.n	8002230 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	23f0      	movs	r3, #240	@ 0xf0
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	429a      	cmp	r2, r3
 800223a:	d008      	beq.n	800224e <HAL_SPI_Init+0xaa>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	23e0      	movs	r3, #224	@ 0xe0
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	2382      	movs	r3, #130	@ 0x82
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	2384      	movs	r3, #132	@ 0x84
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	400b      	ands	r3, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2102      	movs	r1, #2
 800226a:	400b      	ands	r3, r1
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2101      	movs	r1, #1
 8002274:	400b      	ands	r3, r1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6999      	ldr	r1, [r3, #24]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	400b      	ands	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2138      	movs	r1, #56	@ 0x38
 800228a:	400b      	ands	r3, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2180      	movs	r1, #128	@ 0x80
 8002294:	400b      	ands	r3, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	0011      	movs	r1, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	2204      	movs	r2, #4
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	2110      	movs	r1, #16
 80022bc:	400b      	ands	r3, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	2108      	movs	r1, #8
 80022c6:	400b      	ands	r3, r1
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	23f0      	movs	r3, #240	@ 0xf0
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	0011      	movs	r1, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	401a      	ands	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4907      	ldr	r1, [pc, #28]	@ (8002310 <HAL_SPI_Init+0x16c>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	225d      	movs	r2, #93	@ 0x5d
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}
 8002310:	fffff7ff 	.word	0xfffff7ff

08002314 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	1dbb      	adds	r3, r7, #6
 8002322:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002324:	231f      	movs	r3, #31
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	225c      	movs	r2, #92	@ 0x5c
 8002330:	5c9b      	ldrb	r3, [r3, r2]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_SPI_Transmit+0x26>
 8002336:	2302      	movs	r3, #2
 8002338:	e147      	b.n	80025ca <HAL_SPI_Transmit+0x2b6>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	225c      	movs	r2, #92	@ 0x5c
 800233e:	2101      	movs	r1, #1
 8002340:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002342:	f7fe fe03 	bl	8000f4c <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800234a:	2316      	movs	r3, #22
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	1dba      	adds	r2, r7, #6
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	225d      	movs	r2, #93	@ 0x5d
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d004      	beq.n	800236a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002360:	231f      	movs	r3, #31
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
    goto error;
 8002368:	e128      	b.n	80025bc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_SPI_Transmit+0x64>
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002380:	e11c      	b.n	80025bc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	225d      	movs	r2, #93	@ 0x5d
 8002386:	2103      	movs	r1, #3
 8002388:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1dba      	adds	r2, r7, #6
 800239a:	8812      	ldrh	r2, [r2, #0]
 800239c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1dba      	adds	r2, r7, #6
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2244      	movs	r2, #68	@ 0x44
 80023b0:	2100      	movs	r1, #0
 80023b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2246      	movs	r2, #70	@ 0x46
 80023b8:	2100      	movs	r1, #0
 80023ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d110      	bne.n	80023f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2140      	movs	r1, #64	@ 0x40
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2180      	movs	r1, #128	@ 0x80
 80023f0:	01c9      	lsls	r1, r1, #7
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2240      	movs	r2, #64	@ 0x40
 80023fe:	4013      	ands	r3, r2
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d007      	beq.n	8002414 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2140      	movs	r1, #64	@ 0x40
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	23e0      	movs	r3, #224	@ 0xe0
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	429a      	cmp	r2, r3
 800241e:	d952      	bls.n	80024c6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_SPI_Transmit+0x11e>
 8002428:	2316      	movs	r3, #22
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d143      	bne.n	80024ba <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002456:	e030      	b.n	80024ba <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d112      	bne.n	800248c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800248a:	e016      	b.n	80024ba <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800248c:	f7fe fd5e 	bl	8000f4c <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d802      	bhi.n	80024a2 <HAL_SPI_Transmit+0x18e>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_Transmit+0x194>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d108      	bne.n	80024ba <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2203      	movs	r2, #3
 80024ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	225d      	movs	r2, #93	@ 0x5d
 80024b4:	2101      	movs	r1, #1
 80024b6:	5499      	strb	r1, [r3, r2]
          goto error;
 80024b8:	e080      	b.n	80025bc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1c9      	bne.n	8002458 <HAL_SPI_Transmit+0x144>
 80024c4:	e053      	b.n	800256e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <HAL_SPI_Transmit+0x1c4>
 80024ce:	2316      	movs	r3, #22
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d145      	bne.n	8002564 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80024fe:	e031      	b.n	8002564 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d113      	bne.n	8002536 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	7812      	ldrb	r2, [r2, #0]
 800251a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002534:	e016      	b.n	8002564 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002536:	f7fe fd09 	bl	8000f4c <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d802      	bhi.n	800254c <HAL_SPI_Transmit+0x238>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_SPI_Transmit+0x23e>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002552:	231f      	movs	r3, #31
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	225d      	movs	r2, #93	@ 0x5d
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
          goto error;
 8002562:	e02b      	b.n	80025bc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1c8      	bne.n	8002500 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f95d 	bl	8002834 <SPI_EndRxTxTransaction>
 800257a:	1e03      	subs	r3, r0, #0
 800257c:	d002      	beq.n	8002584 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80025aa:	231f      	movs	r3, #31
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e003      	b.n	80025bc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	225d      	movs	r2, #93	@ 0x5d
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	225c      	movs	r2, #92	@ 0x5c
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025c4:	231f      	movs	r3, #31
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	781b      	ldrb	r3, [r3, #0]
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b008      	add	sp, #32
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025e4:	f7fe fcb2 	bl	8000f4c <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	18d3      	adds	r3, r2, r3
 80025f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025f4:	f7fe fcaa 	bl	8000f4c <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025fc:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	015b      	lsls	r3, r3, #5
 8002602:	0d1b      	lsrs	r3, r3, #20
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	4353      	muls	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260a:	e058      	b.n	80026be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	d055      	beq.n	80026be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002612:	f7fe fc9b 	bl	8000f4c <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	429a      	cmp	r2, r3
 8002620:	d902      	bls.n	8002628 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d142      	bne.n	80026ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	21e0      	movs	r1, #224	@ 0xe0
 8002634:	438a      	bics	r2, r1
 8002636:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	2382      	movs	r3, #130	@ 0x82
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	429a      	cmp	r2, r3
 8002642:	d113      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	429a      	cmp	r2, r3
 800264e:	d005      	beq.n	800265c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	429a      	cmp	r2, r3
 800265a:	d107      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2140      	movs	r1, #64	@ 0x40
 8002668:	438a      	bics	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	019b      	lsls	r3, r3, #6
 8002674:	429a      	cmp	r2, r3
 8002676:	d110      	bne.n	800269a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	491a      	ldr	r1, [pc, #104]	@ (80026ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002684:	400a      	ands	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2180      	movs	r1, #128	@ 0x80
 8002694:	0189      	lsls	r1, r1, #6
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	225d      	movs	r2, #93	@ 0x5d
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	225c      	movs	r2, #92	@ 0x5c
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e017      	b.n	80026de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	425a      	negs	r2, r3
 80026ce:	4153      	adcs	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	001a      	movs	r2, r3
 80026d4:	1dfb      	adds	r3, r7, #7
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d197      	bne.n	800260c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b008      	add	sp, #32
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	200005d0 	.word	0x200005d0
 80026ec:	ffffdfff 	.word	0xffffdfff

080026f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026fe:	2317      	movs	r3, #23
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002706:	f7fe fc21 	bl	8000f4c <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	18d3      	adds	r3, r2, r3
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002716:	f7fe fc19 	bl	8000f4c <HAL_GetTick>
 800271a:	0003      	movs	r3, r0
 800271c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	0013      	movs	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	189b      	adds	r3, r3, r2
 8002730:	00da      	lsls	r2, r3, #3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	0d1b      	lsrs	r3, r3, #20
 8002736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002738:	4353      	muls	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800273c:	e068      	b.n	8002810 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	23c0      	movs	r3, #192	@ 0xc0
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	429a      	cmp	r2, r3
 8002746:	d10a      	bne.n	800275e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	2117      	movs	r1, #23
 8002756:	187b      	adds	r3, r7, r1
 8002758:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800275a:	187b      	adds	r3, r7, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	d055      	beq.n	8002810 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002764:	f7fe fbf2 	bl	8000f4c <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002770:	429a      	cmp	r2, r3
 8002772:	d902      	bls.n	800277a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d142      	bne.n	8002800 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	21e0      	movs	r1, #224	@ 0xe0
 8002786:	438a      	bics	r2, r1
 8002788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	2382      	movs	r3, #130	@ 0x82
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	429a      	cmp	r2, r3
 8002794:	d113      	bne.n	80027be <SPI_WaitFifoStateUntilTimeout+0xce>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	429a      	cmp	r2, r3
 80027a0:	d005      	beq.n	80027ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d107      	bne.n	80027be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2140      	movs	r1, #64	@ 0x40
 80027ba:	438a      	bics	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d110      	bne.n	80027ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4916      	ldr	r1, [pc, #88]	@ (8002830 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2180      	movs	r1, #128	@ 0x80
 80027e6:	0189      	lsls	r1, r1, #6
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	225d      	movs	r2, #93	@ 0x5d
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	225c      	movs	r2, #92	@ 0x5c
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e010      	b.n	8002822 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3b01      	subs	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d18e      	bne.n	800273e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b00a      	add	sp, #40	@ 0x28
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	200005d0 	.word	0x200005d0
 8002830:	ffffdfff 	.word	0xffffdfff

08002834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	23c0      	movs	r3, #192	@ 0xc0
 8002844:	0159      	lsls	r1, r3, #5
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	0013      	movs	r3, r2
 800284e:	2200      	movs	r2, #0
 8002850:	f7ff ff4e 	bl	80026f0 <SPI_WaitFifoStateUntilTimeout>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d007      	beq.n	8002868 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285c:	2220      	movs	r2, #32
 800285e:	431a      	orrs	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e027      	b.n	80028b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	0013      	movs	r3, r2
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	@ 0x80
 8002876:	f7ff fead 	bl	80025d4 <SPI_WaitFlagStateUntilTimeout>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d007      	beq.n	800288e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002882:	2220      	movs	r2, #32
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e014      	b.n	80028b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	23c0      	movs	r3, #192	@ 0xc0
 8002892:	00d9      	lsls	r1, r3, #3
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	0013      	movs	r3, r2
 800289c:	2200      	movs	r2, #0
 800289e:	f7ff ff27 	bl	80026f0 <SPI_WaitFifoStateUntilTimeout>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d007      	beq.n	80028b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028aa:	2220      	movs	r2, #32
 80028ac:	431a      	orrs	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e000      	b.n	80028b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b004      	add	sp, #16
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e046      	b.n	8002960 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2288      	movs	r2, #136	@ 0x88
 80028d6:	589b      	ldr	r3, [r3, r2]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2284      	movs	r2, #132	@ 0x84
 80028e0:	2100      	movs	r1, #0
 80028e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe fa0c 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2288      	movs	r2, #136	@ 0x88
 80028f0:	2124      	movs	r1, #36	@ 0x24
 80028f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2101      	movs	r1, #1
 8002900:	438a      	bics	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	0018      	movs	r0, r3
 8002910:	f000 faea 	bl	8002ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 f828 	bl	800296c <UART_SetConfig>
 800291c:	0003      	movs	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e01c      	b.n	8002960 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	490d      	ldr	r1, [pc, #52]	@ (8002968 <HAL_UART_Init+0xa8>)
 8002932:	400a      	ands	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	212a      	movs	r1, #42	@ 0x2a
 8002942:	438a      	bics	r2, r1
 8002944:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fb79 	bl	8003050 <UART_CheckIdleState>
 800295e:	0003      	movs	r3, r0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}
 8002968:	ffffb7ff 	.word	0xffffb7ff

0800296c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b090      	sub	sp, #64	@ 0x40
 8002970:	af00      	add	r7, sp, #0
 8002972:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002974:	231a      	movs	r3, #26
 8002976:	2220      	movs	r2, #32
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4313      	orrs	r3, r2
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4aaf      	ldr	r2, [pc, #700]	@ (8002c5c <UART_SetConfig+0x2f0>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029aa:	430b      	orrs	r3, r1
 80029ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4aaa      	ldr	r2, [pc, #680]	@ (8002c60 <UART_SetConfig+0x2f4>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0018      	movs	r0, r3
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	68d9      	ldr	r1, [r3, #12]
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	0003      	movs	r3, r0
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4aa4      	ldr	r2, [pc, #656]	@ (8002c64 <UART_SetConfig+0x2f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029de:	4313      	orrs	r3, r2
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a9f      	ldr	r2, [pc, #636]	@ (8002c68 <UART_SetConfig+0x2fc>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	0019      	movs	r1, r3
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	220f      	movs	r2, #15
 8002a00:	4393      	bics	r3, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a95      	ldr	r2, [pc, #596]	@ (8002c6c <UART_SetConfig+0x300>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d131      	bne.n	8002a80 <UART_SetConfig+0x114>
 8002a1c:	4b94      	ldr	r3, [pc, #592]	@ (8002c70 <UART_SetConfig+0x304>)
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	2203      	movs	r2, #3
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d01d      	beq.n	8002a64 <UART_SetConfig+0xf8>
 8002a28:	d823      	bhi.n	8002a72 <UART_SetConfig+0x106>
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d00c      	beq.n	8002a48 <UART_SetConfig+0xdc>
 8002a2e:	d820      	bhi.n	8002a72 <UART_SetConfig+0x106>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <UART_SetConfig+0xce>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d00e      	beq.n	8002a56 <UART_SetConfig+0xea>
 8002a38:	e01b      	b.n	8002a72 <UART_SetConfig+0x106>
 8002a3a:	231b      	movs	r3, #27
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	19db      	adds	r3, r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e0b4      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e0ad      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002a56:	231b      	movs	r3, #27
 8002a58:	2220      	movs	r2, #32
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	2204      	movs	r2, #4
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e0a6      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002a64:	231b      	movs	r3, #27
 8002a66:	2220      	movs	r2, #32
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e09f      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002a72:	231b      	movs	r3, #27
 8002a74:	2220      	movs	r2, #32
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	19db      	adds	r3, r3, r7
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e098      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7b      	ldr	r2, [pc, #492]	@ (8002c74 <UART_SetConfig+0x308>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d131      	bne.n	8002aee <UART_SetConfig+0x182>
 8002a8a:	4b79      	ldr	r3, [pc, #484]	@ (8002c70 <UART_SetConfig+0x304>)
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	220c      	movs	r2, #12
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d01d      	beq.n	8002ad2 <UART_SetConfig+0x166>
 8002a96:	d823      	bhi.n	8002ae0 <UART_SetConfig+0x174>
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d00c      	beq.n	8002ab6 <UART_SetConfig+0x14a>
 8002a9c:	d820      	bhi.n	8002ae0 <UART_SetConfig+0x174>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <UART_SetConfig+0x13c>
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d00e      	beq.n	8002ac4 <UART_SetConfig+0x158>
 8002aa6:	e01b      	b.n	8002ae0 <UART_SetConfig+0x174>
 8002aa8:	231b      	movs	r3, #27
 8002aaa:	2220      	movs	r2, #32
 8002aac:	189b      	adds	r3, r3, r2
 8002aae:	19db      	adds	r3, r3, r7
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e07d      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002ab6:	231b      	movs	r3, #27
 8002ab8:	2220      	movs	r2, #32
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	19db      	adds	r3, r3, r7
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e076      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002ac4:	231b      	movs	r3, #27
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	189b      	adds	r3, r3, r2
 8002aca:	19db      	adds	r3, r3, r7
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e06f      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002ad2:	231b      	movs	r3, #27
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	19db      	adds	r3, r3, r7
 8002ada:	2208      	movs	r2, #8
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e068      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002ae0:	231b      	movs	r3, #27
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	19db      	adds	r3, r3, r7
 8002ae8:	2210      	movs	r2, #16
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e061      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a61      	ldr	r2, [pc, #388]	@ (8002c78 <UART_SetConfig+0x30c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d106      	bne.n	8002b06 <UART_SetConfig+0x19a>
 8002af8:	231b      	movs	r3, #27
 8002afa:	2220      	movs	r2, #32
 8002afc:	189b      	adds	r3, r3, r2
 8002afe:	19db      	adds	r3, r3, r7
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e055      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c7c <UART_SetConfig+0x310>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d106      	bne.n	8002b1e <UART_SetConfig+0x1b2>
 8002b10:	231b      	movs	r3, #27
 8002b12:	2220      	movs	r2, #32
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	19db      	adds	r3, r3, r7
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e049      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a50      	ldr	r2, [pc, #320]	@ (8002c64 <UART_SetConfig+0x2f8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d13e      	bne.n	8002ba6 <UART_SetConfig+0x23a>
 8002b28:	4b51      	ldr	r3, [pc, #324]	@ (8002c70 <UART_SetConfig+0x304>)
 8002b2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b2c:	23c0      	movs	r3, #192	@ 0xc0
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	22c0      	movs	r2, #192	@ 0xc0
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d027      	beq.n	8002b8a <UART_SetConfig+0x21e>
 8002b3a:	22c0      	movs	r2, #192	@ 0xc0
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d82a      	bhi.n	8002b98 <UART_SetConfig+0x22c>
 8002b42:	2280      	movs	r2, #128	@ 0x80
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d011      	beq.n	8002b6e <UART_SetConfig+0x202>
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d822      	bhi.n	8002b98 <UART_SetConfig+0x22c>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <UART_SetConfig+0x1f4>
 8002b56:	2280      	movs	r2, #128	@ 0x80
 8002b58:	00d2      	lsls	r2, r2, #3
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00e      	beq.n	8002b7c <UART_SetConfig+0x210>
 8002b5e:	e01b      	b.n	8002b98 <UART_SetConfig+0x22c>
 8002b60:	231b      	movs	r3, #27
 8002b62:	2220      	movs	r2, #32
 8002b64:	189b      	adds	r3, r3, r2
 8002b66:	19db      	adds	r3, r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e021      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002b6e:	231b      	movs	r3, #27
 8002b70:	2220      	movs	r2, #32
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	19db      	adds	r3, r3, r7
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e01a      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002b7c:	231b      	movs	r3, #27
 8002b7e:	2220      	movs	r2, #32
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	2204      	movs	r2, #4
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e013      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002b8a:	231b      	movs	r3, #27
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	19db      	adds	r3, r3, r7
 8002b92:	2208      	movs	r2, #8
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e00c      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e005      	b.n	8002bb2 <UART_SetConfig+0x246>
 8002ba6:	231b      	movs	r3, #27
 8002ba8:	2220      	movs	r2, #32
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	19db      	adds	r3, r3, r7
 8002bae:	2210      	movs	r2, #16
 8002bb0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c64 <UART_SetConfig+0x2f8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d000      	beq.n	8002bbe <UART_SetConfig+0x252>
 8002bbc:	e0a9      	b.n	8002d12 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d015      	beq.n	8002bf8 <UART_SetConfig+0x28c>
 8002bcc:	dc18      	bgt.n	8002c00 <UART_SetConfig+0x294>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d00d      	beq.n	8002bee <UART_SetConfig+0x282>
 8002bd2:	dc15      	bgt.n	8002c00 <UART_SetConfig+0x294>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <UART_SetConfig+0x272>
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d005      	beq.n	8002be8 <UART_SetConfig+0x27c>
 8002bdc:	e010      	b.n	8002c00 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff f913 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8002be2:	0003      	movs	r3, r0
 8002be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002be6:	e014      	b.n	8002c12 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be8:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <UART_SetConfig+0x314>)
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bec:	e011      	b.n	8002c12 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bee:	f7ff f87f 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bf6:	e00c      	b.n	8002c12 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bfe:	e008      	b.n	8002c12 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2220      	movs	r2, #32
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        break;
 8002c10:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d100      	bne.n	8002c1a <UART_SetConfig+0x2ae>
 8002c18:	e14b      	b.n	8002eb2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <UART_SetConfig+0x318>)
 8002c20:	0052      	lsls	r2, r2, #1
 8002c22:	5ad3      	ldrh	r3, [r2, r3]
 8002c24:	0019      	movs	r1, r3
 8002c26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c28:	f7fd fa6c 	bl	8000104 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	0013      	movs	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	189b      	adds	r3, r3, r2
 8002c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d305      	bcc.n	8002c4c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d91d      	bls.n	8002c88 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002c4c:	231a      	movs	r3, #26
 8002c4e:	2220      	movs	r2, #32
 8002c50:	189b      	adds	r3, r3, r2
 8002c52:	19db      	adds	r3, r3, r7
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	e12b      	b.n	8002eb2 <UART_SetConfig+0x546>
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	cfff69f3 	.word	0xcfff69f3
 8002c60:	ffffcfff 	.word	0xffffcfff
 8002c64:	40008000 	.word	0x40008000
 8002c68:	11fff4ff 	.word	0x11fff4ff
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40004400 	.word	0x40004400
 8002c78:	40004800 	.word	0x40004800
 8002c7c:	40004c00 	.word	0x40004c00
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	08003654 	.word	0x08003654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c94:	4b92      	ldr	r3, [pc, #584]	@ (8002ee0 <UART_SetConfig+0x574>)
 8002c96:	0052      	lsls	r2, r2, #1
 8002c98:	5ad3      	ldrh	r3, [r2, r3]
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	69b8      	ldr	r0, [r7, #24]
 8002ca6:	69f9      	ldr	r1, [r7, #28]
 8002ca8:	f7fd fba2 	bl	80003f0 <__aeabi_uldivmod>
 8002cac:	0002      	movs	r2, r0
 8002cae:	000b      	movs	r3, r1
 8002cb0:	0e11      	lsrs	r1, r2, #24
 8002cb2:	021d      	lsls	r5, r3, #8
 8002cb4:	430d      	orrs	r5, r1
 8002cb6:	0214      	lsls	r4, r2, #8
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	1900      	adds	r0, r0, r4
 8002cca:	4169      	adcs	r1, r5
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f7fd fb89 	bl	80003f0 <__aeabi_uldivmod>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	000b      	movs	r3, r1
 8002ce2:	0013      	movs	r3, r2
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce8:	23c0      	movs	r3, #192	@ 0xc0
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d309      	bcc.n	8002d04 <UART_SetConfig+0x398>
 8002cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	035b      	lsls	r3, r3, #13
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d204      	bcs.n	8002d04 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	e0d6      	b.n	8002eb2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002d04:	231a      	movs	r3, #26
 8002d06:	2220      	movs	r2, #32
 8002d08:	189b      	adds	r3, r3, r2
 8002d0a:	19db      	adds	r3, r3, r7
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e0cf      	b.n	8002eb2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d000      	beq.n	8002d20 <UART_SetConfig+0x3b4>
 8002d1e:	e070      	b.n	8002e02 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002d20:	231b      	movs	r3, #27
 8002d22:	2220      	movs	r2, #32
 8002d24:	189b      	adds	r3, r3, r2
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d015      	beq.n	8002d5a <UART_SetConfig+0x3ee>
 8002d2e:	dc18      	bgt.n	8002d62 <UART_SetConfig+0x3f6>
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d00d      	beq.n	8002d50 <UART_SetConfig+0x3e4>
 8002d34:	dc15      	bgt.n	8002d62 <UART_SetConfig+0x3f6>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <UART_SetConfig+0x3d4>
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d005      	beq.n	8002d4a <UART_SetConfig+0x3de>
 8002d3e:	e010      	b.n	8002d62 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d40:	f7ff f862 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8002d44:	0003      	movs	r3, r0
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d48:	e014      	b.n	8002d74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d4a:	4b66      	ldr	r3, [pc, #408]	@ (8002ee4 <UART_SetConfig+0x578>)
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d4e:	e011      	b.n	8002d74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d50:	f7fe ffce 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002d54:	0003      	movs	r3, r0
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d58:	e00c      	b.n	8002d74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d60:	e008      	b.n	8002d74 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002d66:	231a      	movs	r3, #26
 8002d68:	2220      	movs	r2, #32
 8002d6a:	189b      	adds	r3, r3, r2
 8002d6c:	19db      	adds	r3, r3, r7
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
        break;
 8002d72:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d100      	bne.n	8002d7c <UART_SetConfig+0x410>
 8002d7a:	e09a      	b.n	8002eb2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d80:	4b57      	ldr	r3, [pc, #348]	@ (8002ee0 <UART_SetConfig+0x574>)
 8002d82:	0052      	lsls	r2, r2, #1
 8002d84:	5ad3      	ldrh	r3, [r2, r3]
 8002d86:	0019      	movs	r1, r3
 8002d88:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d8a:	f7fd f9bb 	bl	8000104 <__udivsi3>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	005a      	lsls	r2, r3, #1
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	18d2      	adds	r2, r2, r3
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f7fd f9af 	bl	8000104 <__udivsi3>
 8002da6:	0003      	movs	r3, r0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	d921      	bls.n	8002df4 <UART_SetConfig+0x488>
 8002db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	025b      	lsls	r3, r3, #9
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d21c      	bcs.n	8002df4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	200e      	movs	r0, #14
 8002dc0:	2420      	movs	r4, #32
 8002dc2:	1903      	adds	r3, r0, r4
 8002dc4:	19db      	adds	r3, r3, r7
 8002dc6:	210f      	movs	r1, #15
 8002dc8:	438a      	bics	r2, r1
 8002dca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	1903      	adds	r3, r0, r4
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	1902      	adds	r2, r0, r4
 8002dde:	19d2      	adds	r2, r2, r7
 8002de0:	8812      	ldrh	r2, [r2, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1902      	adds	r2, r0, r4
 8002dec:	19d2      	adds	r2, r2, r7
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e05e      	b.n	8002eb2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002df4:	231a      	movs	r3, #26
 8002df6:	2220      	movs	r2, #32
 8002df8:	189b      	adds	r3, r3, r2
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e057      	b.n	8002eb2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e02:	231b      	movs	r3, #27
 8002e04:	2220      	movs	r2, #32
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d015      	beq.n	8002e3c <UART_SetConfig+0x4d0>
 8002e10:	dc18      	bgt.n	8002e44 <UART_SetConfig+0x4d8>
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d00d      	beq.n	8002e32 <UART_SetConfig+0x4c6>
 8002e16:	dc15      	bgt.n	8002e44 <UART_SetConfig+0x4d8>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <UART_SetConfig+0x4b6>
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d005      	beq.n	8002e2c <UART_SetConfig+0x4c0>
 8002e20:	e010      	b.n	8002e44 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e22:	f7fe fff1 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8002e26:	0003      	movs	r3, r0
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e2a:	e014      	b.n	8002e56 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee4 <UART_SetConfig+0x578>)
 8002e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e30:	e011      	b.n	8002e56 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e32:	f7fe ff5d 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002e36:	0003      	movs	r3, r0
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e3a:	e00c      	b.n	8002e56 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002e42:	e008      	b.n	8002e56 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002e48:	231a      	movs	r3, #26
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
        break;
 8002e54:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d02a      	beq.n	8002eb2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <UART_SetConfig+0x574>)
 8002e62:	0052      	lsls	r2, r2, #1
 8002e64:	5ad3      	ldrh	r3, [r2, r3]
 8002e66:	0019      	movs	r1, r3
 8002e68:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e6a:	f7fd f94b 	bl	8000104 <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	001a      	movs	r2, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	18d2      	adds	r2, r2, r3
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f7fd f93f 	bl	8000104 <__udivsi3>
 8002e86:	0003      	movs	r3, r0
 8002e88:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d90a      	bls.n	8002ea6 <UART_SetConfig+0x53a>
 8002e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	025b      	lsls	r3, r3, #9
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d205      	bcs.n	8002ea6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	e005      	b.n	8002eb2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea6:	231a      	movs	r3, #26
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	19db      	adds	r3, r3, r7
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	226a      	movs	r2, #106	@ 0x6a
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2268      	movs	r2, #104	@ 0x68
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	2200      	movs	r2, #0
 8002ecc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ece:	231a      	movs	r3, #26
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	19db      	adds	r3, r3, r7
 8002ed6:	781b      	ldrb	r3, [r3, #0]
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b010      	add	sp, #64	@ 0x40
 8002ede:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee0:	08003654 	.word	0x08003654
 8002ee4:	00f42400 	.word	0x00f42400

08002ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a4a      	ldr	r2, [pc, #296]	@ (800302c <UART_AdvFeatureConfig+0x144>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	2201      	movs	r2, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <UART_AdvFeatureConfig+0x148>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	2202      	movs	r2, #2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a3b      	ldr	r2, [pc, #236]	@ (8003034 <UART_AdvFeatureConfig+0x14c>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a34      	ldr	r2, [pc, #208]	@ (8003038 <UART_AdvFeatureConfig+0x150>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	2210      	movs	r2, #16
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <UART_AdvFeatureConfig+0x154>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <UART_AdvFeatureConfig+0x158>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	2240      	movs	r2, #64	@ 0x40
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <UART_AdvFeatureConfig+0x15c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	035b      	lsls	r3, r3, #13
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d10b      	bne.n	8003002 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <UART_AdvFeatureConfig+0x160>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	2280      	movs	r2, #128	@ 0x80
 8003008:	4013      	ands	r3, r2
 800300a:	d00b      	beq.n	8003024 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a0e      	ldr	r2, [pc, #56]	@ (800304c <UART_AdvFeatureConfig+0x164>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	605a      	str	r2, [r3, #4]
  }
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}
 800302c:	ffff7fff 	.word	0xffff7fff
 8003030:	fffdffff 	.word	0xfffdffff
 8003034:	fffeffff 	.word	0xfffeffff
 8003038:	fffbffff 	.word	0xfffbffff
 800303c:	ffffefff 	.word	0xffffefff
 8003040:	ffffdfff 	.word	0xffffdfff
 8003044:	ffefffff 	.word	0xffefffff
 8003048:	ff9fffff 	.word	0xff9fffff
 800304c:	fff7ffff 	.word	0xfff7ffff

08003050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b092      	sub	sp, #72	@ 0x48
 8003054:	af02      	add	r7, sp, #8
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2290      	movs	r2, #144	@ 0x90
 800305c:	2100      	movs	r1, #0
 800305e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003060:	f7fd ff74 	bl	8000f4c <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2208      	movs	r2, #8
 8003070:	4013      	ands	r3, r2
 8003072:	2b08      	cmp	r3, #8
 8003074:	d12d      	bne.n	80030d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003078:	2280      	movs	r2, #128	@ 0x80
 800307a:	0391      	lsls	r1, r2, #14
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4a47      	ldr	r2, [pc, #284]	@ (800319c <UART_CheckIdleState+0x14c>)
 8003080:	9200      	str	r2, [sp, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	f000 f88e 	bl	80031a4 <UART_WaitOnFlagUntilTimeout>
 8003088:	1e03      	subs	r3, r0, #0
 800308a:	d022      	beq.n	80030d2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003094:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003096:	2301      	movs	r3, #1
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2180      	movs	r1, #128	@ 0x80
 80030ae:	438a      	bics	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2288      	movs	r2, #136	@ 0x88
 80030c2:	2120      	movs	r1, #32
 80030c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2284      	movs	r2, #132	@ 0x84
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e060      	b.n	8003194 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2204      	movs	r2, #4
 80030da:	4013      	ands	r3, r2
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d146      	bne.n	800316e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	03d1      	lsls	r1, r2, #15
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <UART_CheckIdleState+0x14c>)
 80030ea:	9200      	str	r2, [sp, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f000 f859 	bl	80031a4 <UART_WaitOnFlagUntilTimeout>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d03b      	beq.n	800316e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f6:	f3ef 8310 	mrs	r3, PRIMASK
 80030fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80030fc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003100:	2301      	movs	r3, #1
 8003102:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f383 8810 	msr	PRIMASK, r3
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4922      	ldr	r1, [pc, #136]	@ (80031a0 <UART_CheckIdleState+0x150>)
 8003118:	400a      	ands	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003128:	f3ef 8310 	mrs	r3, PRIMASK
 800312c:	61bb      	str	r3, [r7, #24]
  return(result);
 800312e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
 8003132:	2301      	movs	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f383 8810 	msr	PRIMASK, r3
}
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	438a      	bics	r2, r1
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	f383 8810 	msr	PRIMASK, r3
}
 8003158:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	228c      	movs	r2, #140	@ 0x8c
 800315e:	2120      	movs	r1, #32
 8003160:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2284      	movs	r2, #132	@ 0x84
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e012      	b.n	8003194 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2288      	movs	r2, #136	@ 0x88
 8003172:	2120      	movs	r1, #32
 8003174:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	228c      	movs	r2, #140	@ 0x8c
 800317a:	2120      	movs	r1, #32
 800317c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2284      	movs	r2, #132	@ 0x84
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b010      	add	sp, #64	@ 0x40
 800319a:	bd80      	pop	{r7, pc}
 800319c:	01ffffff 	.word	0x01ffffff
 80031a0:	fffffedf 	.word	0xfffffedf

080031a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b4:	e051      	b.n	800325a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3301      	adds	r3, #1
 80031ba:	d04e      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fd fec6 	bl	8000f4c <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e051      	b.n	800327a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2204      	movs	r2, #4
 80031de:	4013      	ands	r3, r2
 80031e0:	d03b      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0xb6>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d038      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0xb6>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b40      	cmp	r3, #64	@ 0x40
 80031ec:	d035      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2208      	movs	r2, #8
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d111      	bne.n	8003220 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2208      	movs	r2, #8
 8003202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	0018      	movs	r0, r3
 8003208:	f000 f83c 	bl	8003284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2290      	movs	r2, #144	@ 0x90
 8003210:	2108      	movs	r1, #8
 8003212:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2284      	movs	r2, #132	@ 0x84
 8003218:	2100      	movs	r1, #0
 800321a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e02c      	b.n	800327a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	401a      	ands	r2, r3
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	429a      	cmp	r2, r3
 8003232:	d112      	bne.n	800325a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2280      	movs	r2, #128	@ 0x80
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0018      	movs	r0, r3
 8003242:	f000 f81f 	bl	8003284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2290      	movs	r2, #144	@ 0x90
 800324a:	2120      	movs	r1, #32
 800324c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2284      	movs	r2, #132	@ 0x84
 8003252:	2100      	movs	r1, #0
 8003254:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e00f      	b.n	800327a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	425a      	negs	r2, r3
 800326a:	4153      	adcs	r3, r2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	001a      	movs	r2, r3
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d09e      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08e      	sub	sp, #56	@ 0x38
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328c:	f3ef 8310 	mrs	r3, PRIMASK
 8003290:	617b      	str	r3, [r7, #20]
  return(result);
 8003292:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003294:	637b      	str	r3, [r7, #52]	@ 0x34
 8003296:	2301      	movs	r3, #1
 8003298:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4926      	ldr	r1, [pc, #152]	@ (8003348 <UART_EndRxTransfer+0xc4>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032be:	f3ef 8310 	mrs	r3, PRIMASK
 80032c2:	623b      	str	r3, [r7, #32]
  return(result);
 80032c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80032c8:	2301      	movs	r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	491b      	ldr	r1, [pc, #108]	@ (800334c <UART_EndRxTransfer+0xc8>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d118      	bne.n	800332a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f8:	f3ef 8310 	mrs	r3, PRIMASK
 80032fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80032fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003302:	2301      	movs	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2110      	movs	r1, #16
 800331a:	438a      	bics	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	228c      	movs	r2, #140	@ 0x8c
 800332e:	2120      	movs	r1, #32
 8003330:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b00e      	add	sp, #56	@ 0x38
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	fffffedf 	.word	0xfffffedf
 800334c:	effffffe 	.word	0xeffffffe

08003350 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2284      	movs	r2, #132	@ 0x84
 800335c:	5c9b      	ldrb	r3, [r3, r2]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_UARTEx_DisableFifoMode+0x16>
 8003362:	2302      	movs	r3, #2
 8003364:	e027      	b.n	80033b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2284      	movs	r2, #132	@ 0x84
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2288      	movs	r2, #136	@ 0x88
 8003372:	2124      	movs	r1, #36	@ 0x24
 8003374:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	438a      	bics	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a0b      	ldr	r2, [pc, #44]	@ (80033c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2288      	movs	r2, #136	@ 0x88
 80033a8:	2120      	movs	r1, #32
 80033aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2284      	movs	r2, #132	@ 0x84
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	dfffffff 	.word	0xdfffffff

080033c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2284      	movs	r2, #132	@ 0x84
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e02e      	b.n	800343a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2284      	movs	r2, #132	@ 0x84
 80033e0:	2101      	movs	r1, #1
 80033e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2288      	movs	r2, #136	@ 0x88
 80033e8:	2124      	movs	r1, #36	@ 0x24
 80033ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	438a      	bics	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	08d9      	lsrs	r1, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 f854 	bl	80034c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2288      	movs	r2, #136	@ 0x88
 800342c:	2120      	movs	r1, #32
 800342e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2284      	movs	r2, #132	@ 0x84
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b004      	add	sp, #16
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2284      	movs	r2, #132	@ 0x84
 8003452:	5c9b      	ldrb	r3, [r3, r2]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003458:	2302      	movs	r3, #2
 800345a:	e02f      	b.n	80034bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2284      	movs	r2, #132	@ 0x84
 8003460:	2101      	movs	r1, #1
 8003462:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2288      	movs	r2, #136	@ 0x88
 8003468:	2124      	movs	r1, #36	@ 0x24
 800346a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2101      	movs	r1, #1
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4a0e      	ldr	r2, [pc, #56]	@ (80034c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f813 	bl	80034c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2288      	movs	r2, #136	@ 0x88
 80034ae:	2120      	movs	r1, #32
 80034b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2284      	movs	r2, #132	@ 0x84
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b004      	add	sp, #16
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	f1ffffff 	.word	0xf1ffffff

080034c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	226a      	movs	r2, #106	@ 0x6a
 80034dc:	2101      	movs	r1, #1
 80034de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2268      	movs	r2, #104	@ 0x68
 80034e4:	2101      	movs	r1, #1
 80034e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034e8:	e043      	b.n	8003572 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034ea:	260f      	movs	r6, #15
 80034ec:	19bb      	adds	r3, r7, r6
 80034ee:	2208      	movs	r2, #8
 80034f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034f2:	200e      	movs	r0, #14
 80034f4:	183b      	adds	r3, r7, r0
 80034f6:	2208      	movs	r2, #8
 80034f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	0e5b      	lsrs	r3, r3, #25
 8003502:	b2da      	uxtb	r2, r3
 8003504:	240d      	movs	r4, #13
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2107      	movs	r1, #7
 800350a:	400a      	ands	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	0f5b      	lsrs	r3, r3, #29
 8003516:	b2da      	uxtb	r2, r3
 8003518:	250c      	movs	r5, #12
 800351a:	197b      	adds	r3, r7, r5
 800351c:	2107      	movs	r1, #7
 800351e:	400a      	ands	r2, r1
 8003520:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003522:	183b      	adds	r3, r7, r0
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	197a      	adds	r2, r7, r5
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	4914      	ldr	r1, [pc, #80]	@ (800357c <UARTEx_SetNbDataToProcess+0xb4>)
 800352c:	5c8a      	ldrb	r2, [r1, r2]
 800352e:	435a      	muls	r2, r3
 8003530:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003532:	197b      	adds	r3, r7, r5
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	4a12      	ldr	r2, [pc, #72]	@ (8003580 <UARTEx_SetNbDataToProcess+0xb8>)
 8003538:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800353a:	0019      	movs	r1, r3
 800353c:	f7fc fe6c 	bl	8000218 <__divsi3>
 8003540:	0003      	movs	r3, r0
 8003542:	b299      	uxth	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	226a      	movs	r2, #106	@ 0x6a
 8003548:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800354a:	19bb      	adds	r3, r7, r6
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	193a      	adds	r2, r7, r4
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	490a      	ldr	r1, [pc, #40]	@ (800357c <UARTEx_SetNbDataToProcess+0xb4>)
 8003554:	5c8a      	ldrb	r2, [r1, r2]
 8003556:	435a      	muls	r2, r3
 8003558:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800355a:	193b      	adds	r3, r7, r4
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4a08      	ldr	r2, [pc, #32]	@ (8003580 <UARTEx_SetNbDataToProcess+0xb8>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003562:	0019      	movs	r1, r3
 8003564:	f7fc fe58 	bl	8000218 <__divsi3>
 8003568:	0003      	movs	r3, r0
 800356a:	b299      	uxth	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2268      	movs	r2, #104	@ 0x68
 8003570:	5299      	strh	r1, [r3, r2]
}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b005      	add	sp, #20
 8003578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	0800366c 	.word	0x0800366c
 8003580:	08003674 	.word	0x08003674

08003584 <memset>:
 8003584:	0003      	movs	r3, r0
 8003586:	1882      	adds	r2, r0, r2
 8003588:	4293      	cmp	r3, r2
 800358a:	d100      	bne.n	800358e <memset+0xa>
 800358c:	4770      	bx	lr
 800358e:	7019      	strb	r1, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	e7f9      	b.n	8003588 <memset+0x4>

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	2600      	movs	r6, #0
 8003598:	4c0c      	ldr	r4, [pc, #48]	@ (80035cc <__libc_init_array+0x38>)
 800359a:	4d0d      	ldr	r5, [pc, #52]	@ (80035d0 <__libc_init_array+0x3c>)
 800359c:	1b64      	subs	r4, r4, r5
 800359e:	10a4      	asrs	r4, r4, #2
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	2600      	movs	r6, #0
 80035a6:	f000 f819 	bl	80035dc <_init>
 80035aa:	4c0a      	ldr	r4, [pc, #40]	@ (80035d4 <__libc_init_array+0x40>)
 80035ac:	4d0a      	ldr	r5, [pc, #40]	@ (80035d8 <__libc_init_array+0x44>)
 80035ae:	1b64      	subs	r4, r4, r5
 80035b0:	10a4      	asrs	r4, r4, #2
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	00b3      	lsls	r3, r6, #2
 80035ba:	58eb      	ldr	r3, [r5, r3]
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	00b3      	lsls	r3, r6, #2
 80035c4:	58eb      	ldr	r3, [r5, r3]
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	08003684 	.word	0x08003684
 80035d0:	08003684 	.word	0x08003684
 80035d4:	08003688 	.word	0x08003688
 80035d8:	08003684 	.word	0x08003684

080035dc <_init>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr

080035e8 <_fini>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr
